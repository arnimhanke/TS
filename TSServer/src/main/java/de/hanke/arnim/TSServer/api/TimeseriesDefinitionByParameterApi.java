/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.14).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package de.hanke.arnim.TSServer.api;

import de.hanke.arnim.TSServer.model.AccessParamterHeadDto;
import de.hanke.arnim.TSServer.model.DeleteParameterHeadDto;
import de.hanke.arnim.TSServer.model.Error;
import de.hanke.arnim.TSServer.model.PersistenceParameterHeadDto;
import de.hanke.arnim.TSServer.model.TimeSeriesHead;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-06-01T11:50:12.361Z")

@Api(value = "timeseriesDefinitionByParameter", description = "the timeseriesDefinitionByParameter API")
@RequestMapping(value = "/TSTool-api")
public interface TimeseriesDefinitionByParameterApi {

    @ApiOperation(value = "Removes timeseries head. The Timeseries must exists!", nickname = "deleteTimeseriesDefinitionByDeleteParameterHeadDto", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 401, message = "unauthorized", response = Error.class),
        @ApiResponse(code = 404, message = "resource not found", response = Error.class),
        @ApiResponse(code = 200, message = "error", response = Error.class) })
    @RequestMapping(value = "/timeseriesDefinitionByParameter",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteTimeseriesDefinitionByDeleteParameterHeadDto(@ApiParam(value = ""  )  @Valid @RequestBody DeleteParameterHeadDto deleteParameterHeadDto);


    @ApiOperation(value = "Get timeseries-Definition for requested AccessParamterHeadDto", nickname = "getTimeseriesDefinitionByAccessParamterHeadDto", notes = "", response = TimeSeriesHead.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = TimeSeriesHead.class),
        @ApiResponse(code = 401, message = "unauthorized", response = Error.class),
        @ApiResponse(code = 404, message = "resource not found", response = Error.class),
        @ApiResponse(code = 200, message = "error", response = Error.class) })
    @RequestMapping(value = "/timeseriesDefinitionByParameter",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<TimeSeriesHead> getTimeseriesDefinitionByAccessParamterHeadDto(@ApiParam(value = ""  )  @Valid @RequestBody AccessParamterHeadDto accessParamterHeadDto);


    @ApiOperation(value = "Create a new TimeseriesDefinition", nickname = "putTimeseriesDefinitionByPersistenceParameterHeadDto", notes = "", response = TimeSeriesHead.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = TimeSeriesHead.class),
        @ApiResponse(code = 401, message = "unauthorized", response = Error.class),
        @ApiResponse(code = 404, message = "resource not found", response = Error.class),
        @ApiResponse(code = 200, message = "error", response = Error.class) })
    @RequestMapping(value = "/timeseriesDefinitionByParameter",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<TimeSeriesHead> putTimeseriesDefinitionByPersistenceParameterHeadDto(@ApiParam(value = ""  )  @Valid @RequestBody PersistenceParameterHeadDto persistenceParameterHeadDto);

}
