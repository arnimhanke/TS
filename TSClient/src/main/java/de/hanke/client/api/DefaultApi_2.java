/*
 * TSTool-service
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package de.hanke.client.api;

import de.hanke.client.ApiCallback;
import de.hanke.client.ApiClient;
import de.hanke.client.ApiException;
import de.hanke.client.ApiResponse;
import de.hanke.client.Configuration;
import de.hanke.client.Pair;
import de.hanke.client.ProgressRequestBody;
import de.hanke.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import de.hanke.client.model.AccessParameterValuesDto;
import de.hanke.client.model.AccessParamterHeadDto;
import de.hanke.client.model.DeleteParameterHeadDto;
import de.hanke.client.model.DeleteParameterValuesDto;
import de.hanke.client.model.PersistenceParameterHeadDto;
import de.hanke.client.model.PersistenceParameterValuesDto;
import de.hanke.client.model.TimeSeriesHead;
import de.hanke.client.model.Timeseries;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi_2 {
    private ApiClient apiClient;

    public DefaultApi_2() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi_2(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteTimeseriesDefinitionByDeleteParameterHeadDto
     * @param deleteParameterHeadDto  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTimeseriesDefinitionByDeleteParameterHeadDtoCall(DeleteParameterHeadDto deleteParameterHeadDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = deleteParameterHeadDto;

        // create path and map variables
        String localVarPath = "/timeseriesDefinitionByParameter";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTimeseriesDefinitionByDeleteParameterHeadDtoValidateBeforeCall(DeleteParameterHeadDto deleteParameterHeadDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = deleteTimeseriesDefinitionByDeleteParameterHeadDtoCall(deleteParameterHeadDto, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Removes timeseries head. The Timeseries must exists!
     * 
     * @param deleteParameterHeadDto  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteTimeseriesDefinitionByDeleteParameterHeadDto(DeleteParameterHeadDto deleteParameterHeadDto) throws ApiException {
        deleteTimeseriesDefinitionByDeleteParameterHeadDtoWithHttpInfo(deleteParameterHeadDto);
    }

    /**
     * Removes timeseries head. The Timeseries must exists!
     * 
     * @param deleteParameterHeadDto  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteTimeseriesDefinitionByDeleteParameterHeadDtoWithHttpInfo(DeleteParameterHeadDto deleteParameterHeadDto) throws ApiException {
        com.squareup.okhttp.Call call = deleteTimeseriesDefinitionByDeleteParameterHeadDtoValidateBeforeCall(deleteParameterHeadDto, null, null);
        return apiClient.execute(call);
    }

    /**
     * Removes timeseries head. The Timeseries must exists! (asynchronously)
     * 
     * @param deleteParameterHeadDto  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTimeseriesDefinitionByDeleteParameterHeadDtoAsync(DeleteParameterHeadDto deleteParameterHeadDto, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTimeseriesDefinitionByDeleteParameterHeadDtoValidateBeforeCall(deleteParameterHeadDto, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteTimeseriesDefinitionByDeleteParameterHeadDtos
     * @param deleteParametersHeadDto  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTimeseriesDefinitionByDeleteParameterHeadDtosCall(List<DeleteParameterHeadDto> deleteParametersHeadDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = deleteParametersHeadDto;

        // create path and map variables
        String localVarPath = "/timeseriesDefinitionByParameters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTimeseriesDefinitionByDeleteParameterHeadDtosValidateBeforeCall(List<DeleteParameterHeadDto> deleteParametersHeadDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = deleteTimeseriesDefinitionByDeleteParameterHeadDtosCall(deleteParametersHeadDto, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Removes timeseries heads. The Timeseries must exists!
     * 
     * @param deleteParametersHeadDto  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteTimeseriesDefinitionByDeleteParameterHeadDtos(List<DeleteParameterHeadDto> deleteParametersHeadDto) throws ApiException {
        deleteTimeseriesDefinitionByDeleteParameterHeadDtosWithHttpInfo(deleteParametersHeadDto);
    }

    /**
     * Removes timeseries heads. The Timeseries must exists!
     * 
     * @param deleteParametersHeadDto  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteTimeseriesDefinitionByDeleteParameterHeadDtosWithHttpInfo(List<DeleteParameterHeadDto> deleteParametersHeadDto) throws ApiException {
        com.squareup.okhttp.Call call = deleteTimeseriesDefinitionByDeleteParameterHeadDtosValidateBeforeCall(deleteParametersHeadDto, null, null);
        return apiClient.execute(call);
    }

    /**
     * Removes timeseries heads. The Timeseries must exists! (asynchronously)
     * 
     * @param deleteParametersHeadDto  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTimeseriesDefinitionByDeleteParameterHeadDtosAsync(List<DeleteParameterHeadDto> deleteParametersHeadDto, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTimeseriesDefinitionByDeleteParameterHeadDtosValidateBeforeCall(deleteParametersHeadDto, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteTimeseriesValuesByDeleteParameterValuesDto
     * @param deleteParameterValuesDto  (optional)
     * @param interval  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTimeseriesValuesByDeleteParameterValuesDtoCall(DeleteParameterValuesDto deleteParameterValuesDto, String interval, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = deleteParameterValuesDto;

        // create path and map variables
        String localVarPath = "/timeseriesValuesByParameter";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (interval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("interval", interval));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTimeseriesValuesByDeleteParameterValuesDtoValidateBeforeCall(DeleteParameterValuesDto deleteParameterValuesDto, String interval, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = deleteTimeseriesValuesByDeleteParameterValuesDtoCall(deleteParameterValuesDto, interval, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Removes values of given Timeseries. The Timeseries must exists!
     * 
     * @param deleteParameterValuesDto  (optional)
     * @param interval  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteTimeseriesValuesByDeleteParameterValuesDto(DeleteParameterValuesDto deleteParameterValuesDto, String interval) throws ApiException {
        deleteTimeseriesValuesByDeleteParameterValuesDtoWithHttpInfo(deleteParameterValuesDto, interval);
    }

    /**
     * Removes values of given Timeseries. The Timeseries must exists!
     * 
     * @param deleteParameterValuesDto  (optional)
     * @param interval  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteTimeseriesValuesByDeleteParameterValuesDtoWithHttpInfo(DeleteParameterValuesDto deleteParameterValuesDto, String interval) throws ApiException {
        com.squareup.okhttp.Call call = deleteTimeseriesValuesByDeleteParameterValuesDtoValidateBeforeCall(deleteParameterValuesDto, interval, null, null);
        return apiClient.execute(call);
    }

    /**
     * Removes values of given Timeseries. The Timeseries must exists! (asynchronously)
     * 
     * @param deleteParameterValuesDto  (optional)
     * @param interval  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTimeseriesValuesByDeleteParameterValuesDtoAsync(DeleteParameterValuesDto deleteParameterValuesDto, String interval, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTimeseriesValuesByDeleteParameterValuesDtoValidateBeforeCall(deleteParameterValuesDto, interval, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteTimeseriesValuesByDeleteParameterValuesDtos
     * @param deleteParametersValuesDto  (optional)
     * @param interval  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTimeseriesValuesByDeleteParameterValuesDtosCall(List<DeleteParameterValuesDto> deleteParametersValuesDto, String interval, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = deleteParametersValuesDto;

        // create path and map variables
        String localVarPath = "/timeseriesValuesByParameters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (interval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("interval", interval));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTimeseriesValuesByDeleteParameterValuesDtosValidateBeforeCall(List<DeleteParameterValuesDto> deleteParametersValuesDto, String interval, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = deleteTimeseriesValuesByDeleteParameterValuesDtosCall(deleteParametersValuesDto, interval, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Removes values of given Timeseries. The Timeseries must exists!
     * 
     * @param deleteParametersValuesDto  (optional)
     * @param interval  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteTimeseriesValuesByDeleteParameterValuesDtos(List<DeleteParameterValuesDto> deleteParametersValuesDto, String interval) throws ApiException {
        deleteTimeseriesValuesByDeleteParameterValuesDtosWithHttpInfo(deleteParametersValuesDto, interval);
    }

    /**
     * Removes values of given Timeseries. The Timeseries must exists!
     * 
     * @param deleteParametersValuesDto  (optional)
     * @param interval  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteTimeseriesValuesByDeleteParameterValuesDtosWithHttpInfo(List<DeleteParameterValuesDto> deleteParametersValuesDto, String interval) throws ApiException {
        com.squareup.okhttp.Call call = deleteTimeseriesValuesByDeleteParameterValuesDtosValidateBeforeCall(deleteParametersValuesDto, interval, null, null);
        return apiClient.execute(call);
    }

    /**
     * Removes values of given Timeseries. The Timeseries must exists! (asynchronously)
     * 
     * @param deleteParametersValuesDto  (optional)
     * @param interval  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTimeseriesValuesByDeleteParameterValuesDtosAsync(List<DeleteParameterValuesDto> deleteParametersValuesDto, String interval, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTimeseriesValuesByDeleteParameterValuesDtosValidateBeforeCall(deleteParametersValuesDto, interval, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getTimeseriesDefinitionByAccessParamterHeadDto
     * @param accessParamterHeadDto  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTimeseriesDefinitionByAccessParamterHeadDtoCall(AccessParamterHeadDto accessParamterHeadDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = accessParamterHeadDto;

        // create path and map variables
        String localVarPath = "/timeseriesDefinitionByParameter";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTimeseriesDefinitionByAccessParamterHeadDtoValidateBeforeCall(AccessParamterHeadDto accessParamterHeadDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getTimeseriesDefinitionByAccessParamterHeadDtoCall(accessParamterHeadDto, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get timeseries-Definition for requested AccessParamterHeadDto
     * 
     * @param accessParamterHeadDto  (optional)
     * @return TimeSeriesHead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TimeSeriesHead getTimeseriesDefinitionByAccessParamterHeadDto(AccessParamterHeadDto accessParamterHeadDto) throws ApiException {
        ApiResponse<TimeSeriesHead> resp = getTimeseriesDefinitionByAccessParamterHeadDtoWithHttpInfo(accessParamterHeadDto);
        return resp.getData();
    }

    /**
     * Get timeseries-Definition for requested AccessParamterHeadDto
     * 
     * @param accessParamterHeadDto  (optional)
     * @return ApiResponse&lt;TimeSeriesHead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TimeSeriesHead> getTimeseriesDefinitionByAccessParamterHeadDtoWithHttpInfo(AccessParamterHeadDto accessParamterHeadDto) throws ApiException {
        com.squareup.okhttp.Call call = getTimeseriesDefinitionByAccessParamterHeadDtoValidateBeforeCall(accessParamterHeadDto, null, null);
        Type localVarReturnType = new TypeToken<TimeSeriesHead>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get timeseries-Definition for requested AccessParamterHeadDto (asynchronously)
     * 
     * @param accessParamterHeadDto  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTimeseriesDefinitionByAccessParamterHeadDtoAsync(AccessParamterHeadDto accessParamterHeadDto, final ApiCallback<TimeSeriesHead> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTimeseriesDefinitionByAccessParamterHeadDtoValidateBeforeCall(accessParamterHeadDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TimeSeriesHead>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTimeseriesDefinitionByAccessParamterHeadDtos
     * @param accessParamtersHeadDto  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTimeseriesDefinitionByAccessParamterHeadDtosCall(List<AccessParamterHeadDto> accessParamtersHeadDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = accessParamtersHeadDto;

        // create path and map variables
        String localVarPath = "/timeseriesDefinitionByParameters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTimeseriesDefinitionByAccessParamterHeadDtosValidateBeforeCall(List<AccessParamterHeadDto> accessParamtersHeadDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getTimeseriesDefinitionByAccessParamterHeadDtosCall(accessParamtersHeadDto, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get timeseries-Definitions for requested AccessParamterHeadDtos
     * 
     * @param accessParamtersHeadDto  (optional)
     * @return List&lt;TimeSeriesHead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<TimeSeriesHead> getTimeseriesDefinitionByAccessParamterHeadDtos(List<AccessParamterHeadDto> accessParamtersHeadDto) throws ApiException {
        ApiResponse<List<TimeSeriesHead>> resp = getTimeseriesDefinitionByAccessParamterHeadDtosWithHttpInfo(accessParamtersHeadDto);
        return resp.getData();
    }

    /**
     * Get timeseries-Definitions for requested AccessParamterHeadDtos
     * 
     * @param accessParamtersHeadDto  (optional)
     * @return ApiResponse&lt;List&lt;TimeSeriesHead&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<TimeSeriesHead>> getTimeseriesDefinitionByAccessParamterHeadDtosWithHttpInfo(List<AccessParamterHeadDto> accessParamtersHeadDto) throws ApiException {
        com.squareup.okhttp.Call call = getTimeseriesDefinitionByAccessParamterHeadDtosValidateBeforeCall(accessParamtersHeadDto, null, null);
        Type localVarReturnType = new TypeToken<List<TimeSeriesHead>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get timeseries-Definitions for requested AccessParamterHeadDtos (asynchronously)
     * 
     * @param accessParamtersHeadDto  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTimeseriesDefinitionByAccessParamterHeadDtosAsync(List<AccessParamterHeadDto> accessParamtersHeadDto, final ApiCallback<List<TimeSeriesHead>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTimeseriesDefinitionByAccessParamterHeadDtosValidateBeforeCall(accessParamtersHeadDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<TimeSeriesHead>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTimeseriesValuesByAccessParameterValuesDto
     * @param accessParameterValuesDto  (optional)
     * @param interval  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTimeseriesValuesByAccessParameterValuesDtoCall(AccessParameterValuesDto accessParameterValuesDto, String interval, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = accessParameterValuesDto;

        // create path and map variables
        String localVarPath = "/timeseriesValuesByParameter";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (interval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("interval", interval));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTimeseriesValuesByAccessParameterValuesDtoValidateBeforeCall(AccessParameterValuesDto accessParameterValuesDto, String interval, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getTimeseriesValuesByAccessParameterValuesDtoCall(accessParameterValuesDto, interval, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get timeseries values for requested AccessParameterValuesDto
     * 
     * @param accessParameterValuesDto  (optional)
     * @param interval  (optional)
     * @return Timeseries
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Timeseries getTimeseriesValuesByAccessParameterValuesDto(AccessParameterValuesDto accessParameterValuesDto, String interval) throws ApiException {
        ApiResponse<Timeseries> resp = getTimeseriesValuesByAccessParameterValuesDtoWithHttpInfo(accessParameterValuesDto, interval);
        return resp.getData();
    }

    /**
     * Get timeseries values for requested AccessParameterValuesDto
     * 
     * @param accessParameterValuesDto  (optional)
     * @param interval  (optional)
     * @return ApiResponse&lt;Timeseries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Timeseries> getTimeseriesValuesByAccessParameterValuesDtoWithHttpInfo(AccessParameterValuesDto accessParameterValuesDto, String interval) throws ApiException {
        com.squareup.okhttp.Call call = getTimeseriesValuesByAccessParameterValuesDtoValidateBeforeCall(accessParameterValuesDto, interval, null, null);
        Type localVarReturnType = new TypeToken<Timeseries>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get timeseries values for requested AccessParameterValuesDto (asynchronously)
     * 
     * @param accessParameterValuesDto  (optional)
     * @param interval  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTimeseriesValuesByAccessParameterValuesDtoAsync(AccessParameterValuesDto accessParameterValuesDto, String interval, final ApiCallback<Timeseries> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTimeseriesValuesByAccessParameterValuesDtoValidateBeforeCall(accessParameterValuesDto, interval, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Timeseries>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTimeseriesValuesByAccessParameterValuesDtos
     * @param accessParametersValuesDto  (optional)
     * @param interval  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTimeseriesValuesByAccessParameterValuesDtosCall(List<AccessParameterValuesDto> accessParametersValuesDto, String interval, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = accessParametersValuesDto;

        // create path and map variables
        String localVarPath = "/timeseriesValuesByParameters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (interval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("interval", interval));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTimeseriesValuesByAccessParameterValuesDtosValidateBeforeCall(List<AccessParameterValuesDto> accessParametersValuesDto, String interval, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getTimeseriesValuesByAccessParameterValuesDtosCall(accessParametersValuesDto, interval, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get timeseries values for requested AccessParameterValuesDtos
     * 
     * @param accessParametersValuesDto  (optional)
     * @param interval  (optional)
     * @return List&lt;Timeseries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Timeseries> getTimeseriesValuesByAccessParameterValuesDtos(List<AccessParameterValuesDto> accessParametersValuesDto, String interval) throws ApiException {
        ApiResponse<List<Timeseries>> resp = getTimeseriesValuesByAccessParameterValuesDtosWithHttpInfo(accessParametersValuesDto, interval);
        return resp.getData();
    }

    /**
     * Get timeseries values for requested AccessParameterValuesDtos
     * 
     * @param accessParametersValuesDto  (optional)
     * @param interval  (optional)
     * @return ApiResponse&lt;List&lt;Timeseries&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Timeseries>> getTimeseriesValuesByAccessParameterValuesDtosWithHttpInfo(List<AccessParameterValuesDto> accessParametersValuesDto, String interval) throws ApiException {
        com.squareup.okhttp.Call call = getTimeseriesValuesByAccessParameterValuesDtosValidateBeforeCall(accessParametersValuesDto, interval, null, null);
        Type localVarReturnType = new TypeToken<List<Timeseries>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get timeseries values for requested AccessParameterValuesDtos (asynchronously)
     * 
     * @param accessParametersValuesDto  (optional)
     * @param interval  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTimeseriesValuesByAccessParameterValuesDtosAsync(List<AccessParameterValuesDto> accessParametersValuesDto, String interval, final ApiCallback<List<Timeseries>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTimeseriesValuesByAccessParameterValuesDtosValidateBeforeCall(accessParametersValuesDto, interval, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Timeseries>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putTimeseriesDefinitionByPersistenceParameterHeadDto
     * @param persistenceParameterHeadDto  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putTimeseriesDefinitionByPersistenceParameterHeadDtoCall(PersistenceParameterHeadDto persistenceParameterHeadDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = persistenceParameterHeadDto;

        // create path and map variables
        String localVarPath = "/timeseriesDefinitionByParameter";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putTimeseriesDefinitionByPersistenceParameterHeadDtoValidateBeforeCall(PersistenceParameterHeadDto persistenceParameterHeadDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = putTimeseriesDefinitionByPersistenceParameterHeadDtoCall(persistenceParameterHeadDto, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a new TimeseriesDefinition
     * 
     * @param persistenceParameterHeadDto  (optional)
     * @return TimeSeriesHead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TimeSeriesHead putTimeseriesDefinitionByPersistenceParameterHeadDto(PersistenceParameterHeadDto persistenceParameterHeadDto) throws ApiException {
        ApiResponse<TimeSeriesHead> resp = putTimeseriesDefinitionByPersistenceParameterHeadDtoWithHttpInfo(persistenceParameterHeadDto);
        return resp.getData();
    }

    /**
     * Create a new TimeseriesDefinition
     * 
     * @param persistenceParameterHeadDto  (optional)
     * @return ApiResponse&lt;TimeSeriesHead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TimeSeriesHead> putTimeseriesDefinitionByPersistenceParameterHeadDtoWithHttpInfo(PersistenceParameterHeadDto persistenceParameterHeadDto) throws ApiException {
        com.squareup.okhttp.Call call = putTimeseriesDefinitionByPersistenceParameterHeadDtoValidateBeforeCall(persistenceParameterHeadDto, null, null);
        Type localVarReturnType = new TypeToken<TimeSeriesHead>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new TimeseriesDefinition (asynchronously)
     * 
     * @param persistenceParameterHeadDto  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putTimeseriesDefinitionByPersistenceParameterHeadDtoAsync(PersistenceParameterHeadDto persistenceParameterHeadDto, final ApiCallback<TimeSeriesHead> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putTimeseriesDefinitionByPersistenceParameterHeadDtoValidateBeforeCall(persistenceParameterHeadDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TimeSeriesHead>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putTimeseriesDefinitionsByPersistenceParameterHeadDtos
     * @param persistenceParametersHeadDto  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putTimeseriesDefinitionsByPersistenceParameterHeadDtosCall(List<PersistenceParameterHeadDto> persistenceParametersHeadDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = persistenceParametersHeadDto;

        // create path and map variables
        String localVarPath = "/timeseriesDefinitionByParameters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putTimeseriesDefinitionsByPersistenceParameterHeadDtosValidateBeforeCall(List<PersistenceParameterHeadDto> persistenceParametersHeadDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = putTimeseriesDefinitionsByPersistenceParameterHeadDtosCall(persistenceParametersHeadDto, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create new TimeseriesDefinitions
     * 
     * @param persistenceParametersHeadDto  (optional)
     * @return List&lt;TimeSeriesHead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<TimeSeriesHead> putTimeseriesDefinitionsByPersistenceParameterHeadDtos(List<PersistenceParameterHeadDto> persistenceParametersHeadDto) throws ApiException {
        ApiResponse<List<TimeSeriesHead>> resp = putTimeseriesDefinitionsByPersistenceParameterHeadDtosWithHttpInfo(persistenceParametersHeadDto);
        return resp.getData();
    }

    /**
     * Create new TimeseriesDefinitions
     * 
     * @param persistenceParametersHeadDto  (optional)
     * @return ApiResponse&lt;List&lt;TimeSeriesHead&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<TimeSeriesHead>> putTimeseriesDefinitionsByPersistenceParameterHeadDtosWithHttpInfo(List<PersistenceParameterHeadDto> persistenceParametersHeadDto) throws ApiException {
        com.squareup.okhttp.Call call = putTimeseriesDefinitionsByPersistenceParameterHeadDtosValidateBeforeCall(persistenceParametersHeadDto, null, null);
        Type localVarReturnType = new TypeToken<List<TimeSeriesHead>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create new TimeseriesDefinitions (asynchronously)
     * 
     * @param persistenceParametersHeadDto  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putTimeseriesDefinitionsByPersistenceParameterHeadDtosAsync(List<PersistenceParameterHeadDto> persistenceParametersHeadDto, final ApiCallback<List<TimeSeriesHead>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putTimeseriesDefinitionsByPersistenceParameterHeadDtosValidateBeforeCall(persistenceParametersHeadDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<TimeSeriesHead>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putTimeseriesValuesByPersistenceParameterValuesDto
     * @param persistenceParameterValuesDto  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putTimeseriesValuesByPersistenceParameterValuesDtoCall(PersistenceParameterValuesDto persistenceParameterValuesDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = persistenceParameterValuesDto;

        // create path and map variables
        String localVarPath = "/timeseriesValuesByParameter";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putTimeseriesValuesByPersistenceParameterValuesDtoValidateBeforeCall(PersistenceParameterValuesDto persistenceParameterValuesDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = putTimeseriesValuesByPersistenceParameterValuesDtoCall(persistenceParameterValuesDto, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Adds values to given Timeseries. The Timeseries must exists!
     * 
     * @param persistenceParameterValuesDto  (optional)
     * @return Timeseries
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Timeseries putTimeseriesValuesByPersistenceParameterValuesDto(PersistenceParameterValuesDto persistenceParameterValuesDto) throws ApiException {
        ApiResponse<Timeseries> resp = putTimeseriesValuesByPersistenceParameterValuesDtoWithHttpInfo(persistenceParameterValuesDto);
        return resp.getData();
    }

    /**
     * Adds values to given Timeseries. The Timeseries must exists!
     * 
     * @param persistenceParameterValuesDto  (optional)
     * @return ApiResponse&lt;Timeseries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Timeseries> putTimeseriesValuesByPersistenceParameterValuesDtoWithHttpInfo(PersistenceParameterValuesDto persistenceParameterValuesDto) throws ApiException {
        com.squareup.okhttp.Call call = putTimeseriesValuesByPersistenceParameterValuesDtoValidateBeforeCall(persistenceParameterValuesDto, null, null);
        Type localVarReturnType = new TypeToken<Timeseries>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Adds values to given Timeseries. The Timeseries must exists! (asynchronously)
     * 
     * @param persistenceParameterValuesDto  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putTimeseriesValuesByPersistenceParameterValuesDtoAsync(PersistenceParameterValuesDto persistenceParameterValuesDto, final ApiCallback<Timeseries> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putTimeseriesValuesByPersistenceParameterValuesDtoValidateBeforeCall(persistenceParameterValuesDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Timeseries>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putTimeseriesValuesByPersistenceParameterValuesDtos
     * @param persistenceParametersValuesDto  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putTimeseriesValuesByPersistenceParameterValuesDtosCall(List<PersistenceParameterValuesDto> persistenceParametersValuesDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = persistenceParametersValuesDto;

        // create path and map variables
        String localVarPath = "/timeseriesValuesByParameters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putTimeseriesValuesByPersistenceParameterValuesDtosValidateBeforeCall(List<PersistenceParameterValuesDto> persistenceParametersValuesDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = putTimeseriesValuesByPersistenceParameterValuesDtosCall(persistenceParametersValuesDto, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Adds values to given Timeseries&#39;s. All Timeseries&#39;s must exists!
     * 
     * @param persistenceParametersValuesDto  (optional)
     * @return List&lt;Timeseries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Timeseries> putTimeseriesValuesByPersistenceParameterValuesDtos(List<PersistenceParameterValuesDto> persistenceParametersValuesDto) throws ApiException {
        ApiResponse<List<Timeseries>> resp = putTimeseriesValuesByPersistenceParameterValuesDtosWithHttpInfo(persistenceParametersValuesDto);
        return resp.getData();
    }

    /**
     * Adds values to given Timeseries&#39;s. All Timeseries&#39;s must exists!
     * 
     * @param persistenceParametersValuesDto  (optional)
     * @return ApiResponse&lt;List&lt;Timeseries&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Timeseries>> putTimeseriesValuesByPersistenceParameterValuesDtosWithHttpInfo(List<PersistenceParameterValuesDto> persistenceParametersValuesDto) throws ApiException {
        com.squareup.okhttp.Call call = putTimeseriesValuesByPersistenceParameterValuesDtosValidateBeforeCall(persistenceParametersValuesDto, null, null);
        Type localVarReturnType = new TypeToken<List<Timeseries>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Adds values to given Timeseries&#39;s. All Timeseries&#39;s must exists! (asynchronously)
     * 
     * @param persistenceParametersValuesDto  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putTimeseriesValuesByPersistenceParameterValuesDtosAsync(List<PersistenceParameterValuesDto> persistenceParametersValuesDto, final ApiCallback<List<Timeseries>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putTimeseriesValuesByPersistenceParameterValuesDtosValidateBeforeCall(persistenceParametersValuesDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Timeseries>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
